pipeline {
agent any
options {
  buildDiscarder(logRotator(numToKeepStr:'2' , artifactNumToKeepStr: '2'))
  timestamps()
  }
environment {
  inventoryName = 'Bommasani'
  }
parameters {
  gitParameter name: 'TAG',
               type: 'PT_TAG',
               defaultValue: 'master'
    }
  stages {
/*    stage('Checkout') {
      steps {
        sh "git fetch --tags"
        script {
          def latestTag = sh(returnStdout: true, script: 'git describe --tags `git rev-list --tags --max-count=1`').trim()
          checkout([$class: 'GitSCM', branches: [[name: "refs/tags/${latestTag}"]], userRemoteConfigs: [[url: 'git@github.com:vamsi8977/jenkinsfile.git']]])
                }
            }
        } */
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: "${params.TAG}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          gitTool: 'Default',
          submoduleCfg: [],
          userRemoteConfigs: [[url: 'git@github.com:vamsi8977/jenkinsfile.git']]
              ])
            }
        }
    stage('SHELL') {
      steps {
        ansiColor('xterm') {
          echo 'Cleaning workspace....'
          sh """
            java -version
            mvn --version
            gradle -version
            ant -version
            ansible --version
            git --version
            terraform -v
            ruby -v
            aws --version
            az --version
            node -v
          """
        }
      }
    }
    stage('Maven') {
      steps {
        withSonarQubeEnv('SonarQube') {
          echo 'Maven Build....'
          sh """
            cd ${WORKSPACE}/maven;
            mvn clean install
            mvn sonar:sonar -Dsonar.projectKey=maven -Dsonar.projectName='maven_sample
          """
        }
      }
    }
    stage('Gradle') {
      steps {
        withSonarQubeEnv('SonarQube') {
          echo 'Gradle Build....'
          sh """
            cd ${WORKSPACE}/gradle;
            ./gradlew clean build
            ./gradlew sonar
          """
        }
      }
    }
    stage('Ant') {
      steps {
        withSonarQubeEnv('SonarQube') {
          echo 'Ant Build....'
          sh """
            cd ${WORKSPACE}/ant;
            ant -buildfile build.xml
            sonar-scanner
          """
        }
      }
    }
    stage('NodeJS') {
      steps {
        withSonarQubeEnv('SonarQube') {
          echo 'NodeJS Build....'
          sh """
            cd ${WORKSPACE}/nodejs;
            npm install
            npm test
            sonar-scanner
          """
        }
      }
    }
    stage ('Archive Artifacts') {
      steps {
        archiveArtifacts artifacts: "ant/build/jar/*.jar"
        archiveArtifacts artifacts: "gradle/build/libs/*.jar"
        archiveArtifacts artifacts: "maven/target/*.jar"
      }
    }
  }//end stages
  post {
      success {
        script {
          sh "git tag -a 1.0.0.${env.BUILD_NUMBER} -m 'Successful build'"
          sh "git push --tags git@github.com:vamsi8977/jenkinsfile.git"
        }
      }
      failure {
        echo "The build failed."
      }
      cleanup{
        deleteDir()
      }
    }
}